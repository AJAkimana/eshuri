extends ../layout
block append content 
  //- .main-panel
    include ../partials/header 
  .wrapper.wrapper-full-page.full-page-background(ng-controller="CourseViewCtrl",style="background-image: url('../imgs/register.jpeg')")
    .full-page.login-page
      .content
        .container-fluid
          .col-md-4.center
            .card(ng-show="add_unit",ng-init="var1 = '#{_id}'")
              .card-header.card-header-icon(data-background-color="rose")
                i.material-icons note
              .card-content
                h4.card-title Add a new unit: <strong>{{unit.title}}  </strong>
                form(ng-submit="addUnit()")
                  .form-group.label-floating
                    label.control-label Title of the unit
                    input.form-control(type="text", ng-model="unit.title")
                  .form-group.label-floating
                    label.control-label A small description of the unit
                    textarea.form-control(rows="4" cols="50", ng-model="unit.description",maxlength="140")
                  button.btn.btn-fill.btn-rose(type="submit") Submit
                  button.btn.btn-fill.btn-danger.pull-right(ng-click="add_unit=!add_unit") Cancel
          .col-md-12
            .card
              .card-header
                .row
                  .col-sm-6.col-md-9.col-lg-7
                    h3.card-title <strong>{{'#{subhead}'|uppercase}}</strong>
                    h4.card-title Course: <strong>{{course_name|uppercase}}</strong>
                    h5.card-title Teacher: {{teacher_name}}
                    h5.card-title 
                      |Academic year: 
                      strong {{'#{academic_year}'|yearToDate:term_name}} 
                    h5.card-title {{term_name|toTermName}} {{actual_term}}
                  .col-sm-6.col-md-3.col-lg-5
                    if access >= 4 && access <= 5
                      a.btn-simple.btn.label.btn-rose(href="/student.marks.page/"+course_id) View marks
                        i.material-icons view_stream
                    if access <= 3 && !visited_user
                      .col-md-12
                        button.btn-simple.btn.btn-rose(ng-click="add_unit=!add_unit") New unit  
                          i.material-icons add
                      .col-md-12
                        a.btn-simple.btn.btn-rose(href="/students/"+course_id) View students
                          i.material-icons add_to_queue
                      .col-md-12
                        button.btn-simple.btn.btn-rose(ng-click="sendToEditQuota()")  Course settings 
                          i.material-icons settings
                h2.card-title.text-center <strong>Units</strong>
                h2.card-title.text-center.text-info(ng-show="!units") <strong>Loading ...</strong>
              .card-content
                .row
                  .col-md-3
                    .card(ng-show="marks.assessments")
                      .card-header
                        h3.text-center <strong>Course overview</strong>
                      .card-content
                        h4.card-title Number of assessment: <strong>{{marks.assessments}}</strong>
                        h4.card-title Assessment done: <strong>{{marks.done}}</strong>
                        h4.card-title Undone assessment: <strong>{{marks.undone}}</strong>
                        h4.card-title(ng-show="marks.marks") Total marks: <strong>{{marks.marks}}/{{marks.quota}}</strong>
                        h4.card-title(ng-show="marks.marks") Average: {{marks.average}}
                      .card-footer(ng-show="marks.average")
                        h4.card-title Average: <strong>{{marks.average}}%</strong>
                    //- h4.text-center(ng-hide="marks.assessments") No overview
                  .col-md-6
                    .card
                      .card-content
                        if access > 2 && access <= 3 && !visited_user
                          .col-md-12.center(ng-show="units.length")
                            .row
                              .col-md-6
                                .form-group.label-floating
                                  h3.control-label Add new content
                                  select.form-control(ng-model="add_content",ng-change="loadUnits")
                                    option(ng-repeat="type in types", value="{{type.no|toLink}}",) {{type.name}}
                                  //span.input-group-btn
                              .col-md-4
                                .form-group.label-floating
                                  h3.control-label Choose unit
                                  select.form-control(ng-model="this_unit",ng-change="addContent()")
                                    option(ng-repeat="unit in units", value="{{unit._id}}",) {{unit.title|uppercase}}
                                  
                              .col-md-2
                                .form-group.label-floating
                                    button.btn.btn-primary(ng-click="addContent()") Go
                              
                        .panel-group(role='tablist')#accordion
                          h5.card-title.text-center(ng-show="!units.length") <i>No units here </i>
                          .panel.panel-default(ng-repeat="unit in units")
                            .panel-heading(role='tab', id="{{'tab_'+$index}}", ng-click="setCurrentUnit(unit._id,unit.title, $index)")
                              a(role='button', data-toggle='collapse', data-parent='#accordion', href="#{{'collapse_'+$index}}", aria-expanded="false", aria-controls="{{'collapse_'+$index}}")
                                h4.panel-title
                                  | {{$index+1}}. {{unit.title|uppercase}}
                                  i.material-icons keyboard_arrow_down
                            .panel-collapse.collapse(role='tabpanel', aria-labelledby="{{'tab_'+$index}}", id="{{'collapse_'+$index}}")
                              .panel-body
                                .col-md-12
                                  a.btn.btn-success.pull-left(ng-click="getContent($index)") View all contents
                                  if access <= 3 && !visited_user
                                    .row
                                      a.btn-simple.btn.label.btn-rose.pull-right(type='button',ng-click="delCurrentUnit()") 
                                        i.material-icons delete
                                        | Delete {{unit.title|uppercase}}

                                  .card
                                    include partials/wtn_note
                                    include partials/pdf_note
                                    include partials/video_note
                                    include partials/auto_assessmt
                                    include partials/wtn_assessmt
                                    include partials/upload_assessmt
                                    include partials/off_assessmt
                  .col-md-3
                    div(ng-show="summaries.length")
                      .col-md-12(ng-repeat="summary in summaries")
                        .card.card-stats
                          .card-header
                            i.material-icons equalizer
                          .card-content
                            a(href="#")
                              h4.card-title {{summary.type}}: <strong>{{summary.number}}</strong>
                          .card-footer
                            .stats
                              i.material-icons local_offer </i>Click to view details
                    //- h4.text-center(ng-hide="summaries.length") No summary to display
block append scripts
  script(src="../js/MIT/MIT_sweetalert2.js", type="text/javascript")
  script(src="../js/MIT/jasny-bootstrap.min.js", type="text/javascript")
  script(src="../js/MIT/MIT_moment.min.js", type="text/javascript")
  script.
    var app =angular.module('eshuri_App', ['ngRoute']);
    app
    .filter('toTermName', function() {
      return function(input){
        return input=='S'?'Semester':'Term'
      }
    })
    .filter('toPublish', function() {
      return function(input){
        return input? "Published":"Unpublished"
      }
    })
    .filter('toCAT', function() {
      return function(input){
        return input? "is Test":"is Exam"
      }
    })
    .filter('toContentName', function() {
      return function(input){ 
        switch(input){
          case 1: input="w_note";break;
          case 2: input="note";break;
          case 3: input="automated tests";break;
          case 4: input="written tests";break;
          case 5: input="uploaded tests";break;
          case 6: input="offline tests";break;
          case 7: input="Video links";break;
          default :break;
        }
        return input;
      }
    })
    .filter('yearToDate', function() {
      return function(input, term){
        input =Number(input)+2000;
        return term=='T'?input:input+'/'+Number(Number(input)+1)
      }
    })
    .filter('toLink', function() {
      return function(input){ 
        switch(input){
          case 1: input="w_note";break;case 2: input="note";break;case 3: input="automated";break;case 4: input="written";break;case 5: input="uploaded";break;case 6: input="offline";break;case 7: input="video";break;default :break;
        }
        return input;
      }
    })
    .filter('my_timeAgo', function() {
      return function(input){
        return moment(new Date(input).getTime()).fromNow();
      }
    })
    .controller('CourseViewCtrl', function($scope, $http,$window){
      $scope.loadSummary = ()=>{
        var data = {_csrf:$scope.anti_csrf,course_id:"#{course_id}",academic_year:"#{academic_year}",visited_user:"#{visited_user}"}
        $http.post('/course.summary', data)
        .then((response)=>{
          $scope.summaries = response.data.contents;
          $scope.level=response.data.access_level;
          $scope.marks=response.data.marks[0];
        })
        .catch((error)=>{
          Notifier.danger(error.data);
        })
      }
      $scope.units=[];
      $scope.loadUnits = function(){
        $http
        .post("/unit.list",{_csrf:$scope.anti_csrf,course_id :$scope.course_id, academic_year:'#{academic_year}'})
        .then(function(response){
          $scope.units=response.data;
        })
        .catch(function(erreur){
          Notifier.danger(erreur.data)
        });        
      }
      $scope.types=[{"no":1, "name":"Writen note"}, {"no":2, "name":"PDF note"}, {"no":3, "name":"Automated assessment"}, {"no":4, "name":"Written assessment"}, {"no":5, "name":"Uploaded assessment"}, {"no":6, "name":"Offline assessment"}, {"no":7, "name":"Videos"}];
      $scope.setCurrentUnit= function(unit_id,unit_name, index){
        //href="/content.add.{{c_type|toLink}}/{{currentUnit}}"
        $scope.unit_index = index;
        $scope.contentLists=[];
        $scope.c_type =-1
        $scope.currentUnit= unit_id;
        $scope.currentUnitName= unit_name;
        $scope.getContent(index);
      }
      $scope.addContent=()=>{
        if(!$scope.add_content||!$scope.this_unit) return;
        $window.location.href="/content.add."+$scope.add_content+"/"+$scope.this_unit+"?ay=#{academic_year}";
      }
      $scope.getContent = function(index){
        $scope.content_index = index;
        $scope.w_notes=[];$scope.video_notes=[];$scope.pdf_notes=[];$scope.auto_assmt=[];
        $scope.wtn_assmt=[];$scope.upld_assmt=[];
        $scope.offline_assmt=[];
        $scope.c_type;
        $scope.contentLists=[];
        $http
        .post('/content.list',{_csrf:$scope.anti_csrf,unit_id :$scope.currentUnit,})
        .then(function(response){
          var contents=response.data;
          $scope.contentLists=contents;
          for(var i=0; i<contents.length; i++){
            switch(contents[i].type){
              case 1: $scope.w_notes.push(contents[i]); break;
              case 2: $scope.pdf_notes.push(contents[i]); break;
              case 3: $scope.auto_assmt.push(contents[i]); break;
              case 4: $scope.wtn_assmt.push(contents[i]); break;
              case 5: $scope.upld_assmt.push(contents[i]); break;
              case 6: $scope.offline_assmt.push(contents[i]); break;
              case 7: $scope.video_notes.push(contents[i]); break;
              default: break;
            }
          }
        })
        .catch(function(erreur){
          Notifier.danger(erreur.data)
        });
      }
      $scope.sendToEditQuota =function(){
        $window.location.href ="/course.page.edit.quota/"+$scope.course_id;
      }
      $scope.viewAnswersContent = function(content_id){
        $window.location.href="/content.answers.page/"+content_id;
      }
      $scope.addUnit = function(){
        $scope.unit._csrf =$scope.anti_csrf;
        $scope.unit.course_id =$scope.course_id;
        $scope.unit.academic_year = "#{academic_year}"
        $http
        .post("/unit.add", $scope.unit)
        .then(function(response){
          swal({
            type: 'success',
            html: $scope.unit.title +' has been successfully added',
            confirmButtonClass: 'btn btn-success',
            buttonsStyling: false
          })
          $scope.unit ={};
          $scope.add_unit = false;
          $scope.loadUnits();
        })
        .catch(function(erreur){
          Notifier.danger(erreur.data);
        }); 
      };

      $scope.delCurrentUnit =function(){
        swal({
            title: 'Do you want to delete the unit '+$scope.currentUnitName.toUpperCase()+' ?',
            text: "You will not be able to revert this!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonClass: 'btn btn-success',
            cancelButtonClass: 'btn btn-danger',
            confirmButtonText: 'Yes, delete it!',
            buttonsStyling: false
          }).then(function(){
            $http
            .post("/unit.delete",{_csrf:$scope.anti_csrf,unit_id :$scope.currentUnit})
            .then(function(response){
              swal({
                type: 'success',
                html: $scope.currentUnitName.toUpperCase()+' has been successfully deleted',
                confirmButtonClass: 'btn btn-success',
                buttonsStyling: false
              });
              $scope.loadUnits();
            })
            .catch(function(erreur){
              Notifier.danger(erreur.data)
            });
          });       
      }
      $scope.setPublish= function(content_id, content_type){
        $http
        .post('/content.publish',{_csrf:$scope.anti_csrf,unit_id:$scope.currentUnit,type:$scope.c_type,
          content_id:content_id
          })
        .then(function(response){
          var type=0;
          switch(content_type){
          case 1: type=$scope.w_notes;break;
          case 2: type=$scope.pdf_notes;break;
          case 3: type=$scope.auto_assmt;break;
          case 4: type=$scope.wtn_assmt;break;
          case 5: type=$scope.upld_assmt;break;
          case 6: type=$scope.offline_assmt;break;
          case 7: type=$scope.video_notes;break;
          default: break;
          }
          if(type==0) return;
          for(var i=0; i<type.length;i++)
            if(type[i]._id==content_id){
              type[i].isPublished=!type[i].isPublished;
              break;
            }
        })
          
        .catch(function(erreur){
          Notifier.danger(erreur.data)
        });
      }   

      $scope.deleteContent = function(pdf_id,pdf_name){
        swal({
            title: 'Do you want to remove the note '+pdf_name+' ?',
            text: "You won't be able to revert this!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonClass: 'btn btn-success',
            cancelButtonClass: 'btn btn-danger',
            confirmButtonText: 'Yes, delete it!',
            buttonsStyling: false
          }).then(function(){
            $http
            .post("/content.delete",{_csrf:$scope.anti_csrf,content_id:pdf_id })
            .then(function(response){
              $scope.getContent($scope.c_type);
              swal({
                title: 'Deleted!',
                text: pdf_name.toUpperCase()+' has been deleted',
                type: 'success',
                confirmButtonClass: "btn btn-success",
                buttonsStyling: false
              })
            })
            .catch(function(erreur){
              Notifier.danger(erreur.data);
            });
          });
      }
      $scope.editContent = function(content_id, content_type){
        // we choose the route depending on the c_type
        var URL=null;
        switch(content_type){
          case 1: URL ="/content.edit.w_note/";break;
          case 2: URL ="/content.edit.note/";break;
          case 3: URL ="/content.edit.automated/";break;
          case 4: URL ="/content.edit.written/";break;
          case 5: URL ="/content.edit.uploaded/";break;
          case 6: URL ="/content.edit.offline/";break;
          default: break;
        }
        if(!URL) return;
        $window.location.href=URL+content_id;
      }
      $scope.loadFirstUnit=function(){
        for(var i=0;i<=$scope.units.length;i++){
          if(i=0){
            $scope.setCurrentUnit($scope.units[i]._id,$scope.units[i].name,0)
          }
        }
      }
      $scope.loadFirstUnit();
      $scope.loadSummary();
      //Initial values
      $scope.teacher_name ="#{teacher_name}";
      $scope.course_name ="#{course_name}";
      $scope.course_id ="#{course_id}";
      $scope.c_type ="";
      $scope.term_name ="#{term_name}";
      $scope.actual_term ="#{actual_term}";
      $scope.pdfs=[]; // PDFS will be loaded from back end server 
      $scope.loadUnits();
    })