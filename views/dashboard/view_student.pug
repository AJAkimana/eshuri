extends ../layout
block append scripts
  script(src="../js/MIT/jquery.select-bootstrap.js",type="application/javascript")
block append content 
  //.main-panel
    include ../partials/header 
  .wrapper.wrapper-full-page.full-page-background(ng-controller="studentCtrl",style="background-image: url('../imgs/register.jpeg')")
    .full-page.login-page
      .content
        .container-fluid
          .card
            .row
              .col-xs-12.col-sm-12.col-md-3.col-lg-3
                .card
                  .card-header.card-header-icon(data-background-color="rose")
                    i.material-icons school
                  .card-content
                    h2.card-title 
                      | Classes
                    h3.category.text-center(ng-show ="!classes.length") No classes
                    .table-responsive(ng-show ="classes.length")
                      form.form-inline
                        .form-group.pull-right
                          input.form-control(type='text', ng-model='classe_search', placeholder='Search')
                      table.table
                        thead
                          th: a.btn-simple.btn.label.btn-rose(ng-click="a='name';b=!b") Name
                        tbody
                          tr(pagination-id="allclasses", dir-paginate="classe in classes|orderBy:name|filter:classe_search|itemsPerPage:5")
                            td: h3.btn.label(ng-click="getstudentList(classe._id, classe.name, classe.level)", ng-class="classe.name==classe_name?'btn-primary':'btn-danger'") {{classe.name|uppercase|toClasseName:term_name}}
                      dir-pagination-controls.pull-right(pagination-id='allclasses', max-size='5', direction-links='true', boundary-links='true')
              .col-xs-12.col-sm-12.col-md-9.col-lg-9
                .card
                  .card-header.card-header-icon(data-background-color="rose")
                    i.material-icons school
                  .card-content
                    h2.card-title 
                      | List of students in 
                      strong {{classe_name|uppercase|toClasseName:term_name}} 
                    h3.category.text-center(ng-show ="!students.length") No student found
                    .text-center.text-info(ng-show ="loading")
                      i.fa.fa-circle-o-notch.fa-spin(style='font-size: 12px')
                      h2: strong Loading. Please wait...
                    
                    .table-responsive(ng-show ="students.length&&!loading")
                      form.form-inline
                        .form-group.pull-left
                          strong Show
                          select.form-control(ng-init="n_pages=10", ng-model="n_pages", value="10")
                            option(value="{{pag}}", ng-repeat="pag in pages") {{pag}}
                          strong entries
                        .form-group.pull-right
                          input.form-control(type='text', ng-model='search', placeholder='Search')
                      table.table
                        thead
                          th.text-center #
                          th: a.btn-simple.btn.label.btn-rose(ng-click="a='name';b=!b") Name
                          th: a.btn-simple.btn.label.btn-rose(ng-click="a='URN';b=!b") URN
                          th: a.btn-simple.btn.label.btn-rose(ng-click="a='hasPaid';b=!b") Can pass tests
                          th: a.btn-simple.btn.label.btn-rose(ng-click="a='isEnabled';b=!b") Access to system
                          th: a.btn-simple.btn.label.btn-rose Previous class
                          th Actions
                        tbody
                          tr(pagination-id="allstudents", dir-paginate="student in students|orderBy:a:b|filter:search|itemsPerPage:n_pages")
                            td(width="1%" height="1%") {{$index + 1}}
                            td: a(href="/user/{{student._id}}") {{student.name|uppercase}}
                            td {{student.URN|uppercase}}
                            td.text-center: a.btn-simple.btn.label.btn-rose(ng-click="enablePaid(student,student.hasPaid)") {{student.hasPaid|toPaid}}
                            td: a.btn-simple.btn.label(ng-click='activateUser(student)',ng-class="student.isEnabled?'btn-success':'btn-danger'") {{student.isEnabled|toURL}}
                            td
                              h5(ng-if="student.prev_classes.length==0") No class
                              ul(ng-if="student.prev_classes.length!=0")
                                li(type="1" ng-repeat="classe in student.prev_classes")
                                  a.btn-simple.btn.label.btn-rose(ng-bind="classe.class_id!=undefined?(classe.class_id|toPreClasseName:classes|toClasseName:term_name|uppercase):(classe|toPreClasseName:classes|toClasseName:term_name|uppercase)",ng-click="revertStudent(classe.class_id, student.name, student._id)")
                            td.td-actions.text-right
                              select(ng-model="new_class",ng-change="changeClass(student, new_class)")
                                option(value="{{classe._id}}" ng-repeat="classe in nextClasses") {{classe.name|uppercase|toClasseName:term_name}}
                                option(value="fin") Alumnus
                              button.btn.btn-danger.btn-sm(ng-click="studentRepeatModel(student._id,student.name)",data-target='#student_rpt_Model', data-toggle='modal') Repeat
                              button.btn.btn-danger.btn-sm(ng-click="deleteStudent(student._id,student.name)")
                                i.material-icons close
                                | Del
                              button.btn.btn-primary.btn-sm(ng-click="setCurrent(student)" ,data-target='#student_edit_Model', data-toggle='modal')
                                i.material-icons edit
                                | Edit
                              button.btn.btn-info.btn-sm(ng-click="setCurrent(student)" ,data-target='#add_ay_Model', data-toggle='modal')
                                i.material-icons edit
                                | Set AY
                      dir-pagination-controls.pull-right(pagination-id='allstudents', max-size='5', direction-links='true', boundary-links='true')
      #student_rpt_Model.modal.fade(role='dialog')
        .modal-dialog
          .modal-content
            .modal-header
              h4.card-title 
                strong Set student to repeat
            .modal-body
              .h3.text-center
                |Name:  
                strong {{student_name|uppercase}}
              .row
                .col-md-6
                  h4 Select class is repeating in
                .col-md-6
                  .form-group.label-floating
                    select.form-control(ng-model="classe_chosen",ng-change="setRepeatStudent(classe_chosen)")
                      option(disabled) Pick a classe
                      option(value="{{c._id}}",ng-repeat="c in r_Classes") {{c.name|uppercase|toClasseName:term_name}}
            .modal-footer
              button.btn.btn-sm.btn-warning(type='button', data-dismiss='modal') Cancel
      #student_edit_Model.modal.fade(role='dialog')
        .modal-dialog
          .modal-content
            .modal-header
              h4.card-title.text-center 
                | Edit <u>Name</u> and <u>reset password </u> for
                br
                br
                strong(ng-bind="currStudent.name|uppercase")
            .modal-body
              input.form-control(type="text",ng-model="currStudent.email",placeholder="Student email",readonly)
              input.form-control(type="text",ng-model="currStudent.name",placeholder="Student name")
              input.form-control(type="password",ng-model="admin_pass",placeholder="Type your password")
            .modal-footer
              h4.pull-left
                | Password will be set to 
                u
                  b.text-info MyEshuri
              button.btn.btn-sm.btn-primary(ng-click="editStudent()") Confirm
              button.btn.btn-sm.btn-warning(type='button', data-dismiss='modal') Cancel
      #add_ay_Model.modal.fade(role='dialog')
        .modal-dialog
          .modal-content
            .modal-header
              h4.card-title.text-center 
                | Add Academic year of previous class for
                br
                strong(ng-bind="currStudent.name|uppercase")
            .modal-body
              .table-responsive(ng-show="currStudent.prev_classes.length")
                table.table.table-border
                  tr
                    th #
                    th Class
                    th Ac. Year
                  tr(ng-repeat="classe in currStudent.prev_classes")
                    td(ng-bind="$index+1")
                    td(ng-bind="classe.class_id|toPreClasseName:classes|toClasseName:term_name|uppercase")
                    td
                      input.form-control(type="number" ng-model="classe.academic_year" min="17" max="19")
              h4.text-info(ng-hide="currStudent.prev_classes.length") No classes
            .modal-footer
              button.btn.btn-sm.btn-primary(ng-click="editAcYear()") Confirm
              button.btn.btn-sm.btn-warning(type='button', data-dismiss='modal') Cancel
block append scripts
  script(src="../js/MIT/MIT_sweetalert2.js", type="text/javascript")
  script(src="../js/MIT/jasny-bootstrap.min.js", type="text/javascript")
  script.
    var app =angular.module('eshuri_App', ['ngRoute', 'angularUtils.directives.dirPagination']);
    app
    .filter('toPaid', function(){
      return (input)=>{
        return input ? "YES":"NO";
      }     
    })
    .filter('toClasseName', function() {
      return function(input, term){
        return term=='S'?'Y'+input:'S'+input
      }
    })
    .filter('toPreClasseName', function(){
      return function(input,list_classes){
        //- if(input==''||!input) return 'No class';
        for(var i =0;i < list_classes.length;i++){
          if(list_classes[i]._id == input) return list_classes[i].name
        }
      }
    })
    .filter('toURL', function() {
      return function(input){
        return input?'Enabled':'Disabled'
      }
    })
    .controller('studentCtrl', function($scope, $http,$window){
      $scope.setCurrent=(student)=>{
        $scope.currStudent=student;
      }
      $scope.view_student = function(id_student){
        $window.location.href ="/student/"+id_student;
      }
      $scope.studentRepeatModel = function(id, name){
        $scope.student_name=name;
        $scope.student_id=id;
      }
      $scope.setRepeatStudent = function(classe){
        console.log('Classe id:'+classe)
        var body={class_id:$scope.class_id,student_id:$scope.student_id,new_class:classe, level:$scope.level}
        var classeName='';
        for(var i=0;i<$scope.classes.length;i++){
          if($scope.classes[i]._id==classe){
            if($scope.term_name=="T") classeName='S'+$scope.classes[i].name.toUpperCase();
            else classeName='Y'+$scope.classes[i].name.toUpperCase();
          } 
        }
        swal({
          title: 'Student repeat',
          text: "Are you sure you want <i style='color:green'>"+$scope.student_name.toUpperCase()+"</i> to repeat in <i style='color:red'>"+classeName+"</i>?",
          type: 'warning',
          showCancelButton: true,
          confirmButtonClass: 'btn btn-success',
          cancelButtonClass: 'btn btn-warning',
          confirmButtonText: 'Yes I am sure!',
          buttonsStyling: false
        }).then(function(){
          $http
          .post('/student.post.repeat',body)
          .then(function(response){
            $scope.getstudentList($scope.class_id, $scope.classe_name, $scope.level);
            Notifier.success($scope.student_name.toUpperCase()+" is put to repeat");
          })
          .catch(function(error){
            Notifier.danger(error.data)
          })
        }).catch(swal.noop)
      }
      $scope.revertStudent = function(classe, name, id){
        console.log('nexts:'+classe+' name: '+name)
        var body={class_id:$scope.class_id,student_id:id,new_class:classe, level:$scope.level}
        var classeName='';
        for(var i=0;i<$scope.classes.length;i++){
          if($scope.classes[i]._id==classe){
            if($scope.term_name=="T") classeName='S'+$scope.classes[i].name.toUpperCase();
            else classeName='Y'+$scope.classes[i].name.toUpperCase();
          } 
        }
        swal({
          title: 'Revert Change classe action',
          text: "Are sure you want to revert <i style='color:green'>"+name.toUpperCase()+"</i> to <i style='color:red'>"+classeName+"</i>?",
          type: 'warning',
          showCancelButton: true,
          confirmButtonClass: 'btn btn-success',
          cancelButtonClass: 'btn btn-warning',
          confirmButtonText: 'Yes I am sure!',
          buttonsStyling: false
        }).then(function(){
          $http
          .post('/school.change.to.previous',body)
          .then(function(response){
            $scope.getstudentList($scope.class_id, $scope.classe_name, $scope.level);
            Notifier.success("Classe of "+name.toUpperCase()+" has successfully reverted");
          })
          .catch(function(error){
            Notifier.danger(error.data)
          })
        }).catch(swal.noop)
      }
      $scope.editAcYear=()=>{
        var body={class_id:$scope.class_id,student_id:$scope.currStudent._id,classes:$scope.currStudent.prev_classes}
        $http.post('/set.ac_year.student/'+$scope.class_id,body)
        .then((response)=>{
          $('#add_ay_Model').modal('hide');
          Notifier.success('Successfully updated')
        })
        .catch((error)=>{
          Notifier.danger(error.data)
        })
      }
      $scope.editStudent=()=>{
        $http
        .post("/school.student.edit",{_csrf:$scope.anti_csrf,student_id:$scope.currStudent._id,name:$scope.currStudent.name,email:$scope.currStudent.email,admin_pass:$scope.admin_pass})
        .then((response)=>{
          $('#student_edit_Model').modal('hide');
          $scope.reload();
          swal({
            title: 'Edited success!',
            text: $scope.currStudent.name.toUpperCase()+' password was changed to <b><u>MyEshuri</u></b>. S/he is recommended to change it immediately through account: <b><i>Profile->Change setting->Credentials</i></b>',
            type: 'success',
            confirmButtonClass: "btn btn-success",
            buttonsStyling: false
          })
          $scope.admin_pass=null;
        })
        .catch((erreur)=>{
          Notifier.danger(erreur.data);
        });
      }
      $scope.deleteStudent = function(student_id,student_name){
        swal({
          title: 'Do you want to delete the student \n<i style="color:red">'+student_name.toUpperCase()+'</i> \n ?',
          text: "You will not be able to revert this!",
          html:'<div class="form-group"><label> Type your password please</label>'+
            '<input id="confirmPass" type="password" class="form-control" />'+
          '</div> <span class="category"> This action cannot be reverted !</span>',
          type: 'warning',
          showCancelButton: true,
          confirmButtonClass: 'btn btn-success',
          cancelButtonClass: 'btn btn-danger',
          confirmButtonText: 'Yes, delete it!',
          buttonsStyling: false
        }).then(function(){
            $http
          .post("/school.student.delete",{_csrf:$scope.anti_csrf,student_id:student_id,confirmPass:$("#confirmPass").val() })
          .then(function(response){
            $scope.reload();
            swal({
              title: 'Deleted!',
              text: student_name.toUpperCase()+' and all of h/her content \n has been successfully deleted.',
              type: 'success',
              confirmButtonClass: "btn btn-success",
              buttonsStyling: false
            })
          })
          .catch(function(erreur){
            Notifier.danger(erreur.data);
          });
        }).catch(swal.noop);
      }
      $scope.enablePaid = (student,hasPaid)=>{
        $http
        .post("/student.set_paid",{_csrf:$scope.csrf_token,student_id:student._id,
          hasPaid:!hasPaid
        })
        .then(function(response){
          student.hasPaid =response.data;
        })
        .catch(function(erreur){
          Notifier.danger(erreur.data)
        }); 
      }
      $scope.getstudentList = function(classe, name, level){
        $scope.loading=true;
        $scope.classe_name = name;
        $scope.level = level;
        $scope.class_id = classe
        $http
        .post("/school.students.list",{_csrf:$scope.csrf_token,class_id:classe})
        .then(function(response){
          $scope.loading=false;
          $scope.students=response.data;
          $scope.getNextClasses();
          $scope.getRepeatClasses();
        })
        .catch(function(erreur){
          Notifier.danger(erreur.data)
        }); 
      }
      $scope.reload = function(){
        $scope.getstudentList($scope.class_id, $scope.classe_name, $scope.level);
        //- $scope.getNextClasses($scope.class_id);
        $scope.getListClasses();
      }
      $scope.getNextClasses = function(){
        $http
        .get('/classe.get.nexts/'+$scope.class_id)
        .then(function(response){
          $scope.nextClasses = response.data;
          //console.log('nexts classes:'+JSON.stringify(response.data));
        })
        .catch(function(error){
          Notifier.danger(error.data);
        })
      }
      // Classes that will be assigned to a repeated students
      $scope.getRepeatClasses = function(){
        $http
        .get('/classe.get.repeat/'+$scope.class_id)
        .then(function(response){
          $scope.r_Classes = response.data;
          //console.log('nexts classes:'+JSON.stringify(response.data));
        })
        .catch(function(error){
          Notifier.danger(error.data);
        })
      }
      $scope.changeClass = function(user, classe){
        $scope.person = {student_id:user._id, level:$scope.level, class_id:$scope.class_id,new_class:classe, academic_year:'#{academic_year}'};
        $http
        .post('/school.change.to.next',$scope.person)
        .then(function(response){
          $scope.getstudentList($scope.class_id, $scope.classe_name, $scope.level);
          Notifier.success("Classe of "+user.name.toUpperCase()+" has successfully changed");
        })
        .catch(function(error){
          Notifier.danger(error.data);
        })
      }
      $scope.getListClasses = function(){
        $http
        .get("/classe.list/"+$scope.school_id)
        .then(function(response){
          $scope.classes = response.data;
        })
        .catch(function(erreur){
          Notifier.danger(erreur.data);
        });
      }
      $scope.activateUser = function(user){
        $http
        .get("/user.enable/"+user._id)
        .then(function(response){
          user.isEnabled =!user.isEnabled;
        })
        .catch(function(erreur){
          Notifier.danger(erreur.data)
        }); 
      }
      //- $scope.student = {};
      $scope.pages=[3,5,10,15,20,25];
      $scope.add_student=false;
      $scope.loading=false;
      $scope.term_name = "#{term_name}";
      $scope.classe_name = "#{classe_name}";
      $scope.level = "#{level}";
      $scope.class_id ="#{class_id}";
      $scope.school_id = "#{school_id}"
      $scope.anti_csrf = "#{csrf_token}";
      $scope.reload();
    })