extends ../layout
block append scripts
  script(src="../js/MIT/jquery.select-bootstrap.js",type="application/javascript")
block append content 
  //- .main-panel
    include ../partials/header 
  .wrapper.wrapper-full-page.full-page-background(ng-controller="course_ManageCtrl",style="background-image: url('../imgs/register.jpeg')")
    .full-page.login-page
      .content
        .container-fluid
          .row              
            .col-md-3.center
              .card(ng-show="change_academic")
                .card-header(data-background-color="rose")
                  i.material-icons school
                  h5.card-title Edit class settings
                .card-content
                  .row.col-md-10.center
                    .input-group
                      span.input-group-addon.icon.ion-ios-settings
                      .form-group.label-floating
                        label.control-label New Academic year (e.g 2017)
                        select.form-control(type="text",autocomplete="off",ng-model="nv.academic_year")
                          option(value="{{year}}", ng-repeat="year in getYears()") {{year}}
                    .input-group
                      span.input-group-addon.icon.ion-ios-settings
                      .form-group.label-floating
                        label.control-label Choose the current term
                        select.form-control(required="true",ng-model="nv.currentTerm")
                          option(value="{{$index + 1}}", ng-repeat="i in getTerms_Limit()") {{term_name|toTermName}} {{$index + 1}}
                    button.btn.btn-fill.btn-rose.pull-right(ng-click="updateClass()") Change
                    
            .col-md-5.center
              .card(ng-show="!teacher_add && c_add")
                .card-header(data-background-color="rose")
                  i.material-icons school
                  h5.card-title {{institution|toNiceName}}: <strong>{{school_name|uppercase}}</strong>
                  h6.pull-right.card-title {{classe_name|uppercase|toClasseName:term_name}}
                  h1
                .card-content
                  .formu
                    .row
                      .col-md-12
                        .form_yanje
                          .form-group
                              p.category.text-info If you see few courses, 
                                a(href="/dashboard.register.course/{{school_id}}") click to add more..
                          .form-group.label-floating
                            label.control-label Enter a new course
                            select.form-control(required="true", title="Choose course", ng-model="newCourse.name", ng-change="setCourseCode()")
                              option(value="{{cours.name}}", ng-repeat="cours in schoolCourses") {{cours.name|uppercase}}
                            //input.form-control(type="text",required="true",ng-model="newCourse.name")
                          .row
                            .col-md-4
                              .form-group.label-floating
                                label.control-label {{term_name|toTermName}}:
                                br
                                select.form-control(required="true", title="Choose the {{term_name|toTermName}}",ng-model="newCourse.courseTerm", ng-disabled="term_quantity==3")
                                  option(value="4") Whole year
                                  option(value="{{$index + 1}}", ng-repeat="i in getTerms_Limit()") {{term_name|toTermName}} {{$index + 1}}
                            .col-md-8
                              .form-group.label-floating
                                label.control-label Course code 
                                br
                                input.form-control(type="text",autocomplete="off",required="true",ng-model="newCourse.code")
                        
                          .form-group.label-floating
                            label.control-label Weight on report
                            input.form-control(type="text",autocomplete="off",required="true",ng-model="newCourse.weightOnReport")

                          
                          .form-group.label-floating
                            label.control-label Teacher of course
                            select.form-control(required="true",ng-model="newCourse.teacher_id")
                              option(disabled selected) Choose a teacher
                              option(value="{{teacher._id}}",ng-repeat="teacher in teachers") {{teacher.name}}
                          .form-group
                            p.category The teacher of the course can be changed later..
                          .form-group
                            button.btn.btn-fill.btn-rose(ng-click="addNewCourse()") Add
                            button.btn.btn-fill.btn-danger.pull-right(ng-click="c_add =false") Cancel
            .col-xs-12.col-sm-12.col-md-3.col-lg-3
              .card
                .card-header.card-header-icon(data-background-color="rose")
                  i.material-icons school
                .card-content
                  h2.card-title 
                    | Classes
                  h3.category.text-center(ng-show ="!classes.length") No classes
                  .table-responsive(ng-show ="classes.length")
                    form.form-inline
                      .form-group.pull-right
                        input.form-control(type='text', ng-model='classe_search', placeholder='Search')
                    table.table
                      thead
                        th: a.btn-simple.btn.label.btn-rose(ng-click="a='name';b=!b") Name
                      tbody
                        tr(pagination-id="allclasses", dir-paginate="classe in classes|orderBy:name|filter:classe_search|itemsPerPage:10")
                          td: a(style='color:#3d4958;',href="/dashboard.course/{{classe._id}}") {{classe.name|uppercase|toClasseName:term_name}}
                    dir-pagination-controls.pull-right(pagination-id='allclasses', max-size='5', direction-links='true', boundary-links='true')
            .col-xs-12.col-sm-12.col-md-9.col-lg-9
              .card
                .card-header.card-header-icon(data-background-color="rose")
                  i.material-icons school
                .card-content
                  .col-md-12
                    h5 Academic year: {{academic_year|yearToDate}} <br/> Current {{term_name|toTermName}}: {{currentTerm}}
                  .col-md-12.text-right
                    a.btn-simple.btn.label.btn-rose(ng-click="c_add=!c_add") Add a new course +
                    a.btn-simple.btn.label.btn-rose(ng-click="change_academic=!change_academic") Change class settings
                    a.btn-simple.btn.label.btn-rose(href="/dashboard.students/"+classe_id) View class students
                      i.material-icons person_outline

                  .col-md-12
                    h3.text-center List of courses in <b>{{classe_name|uppercase|toClasseName:term_name}}</b> at {{school_name|uppercase}}
                    .table-responsive(ng-show="courses.length")
                      form.form-inline
                        .form-group.pull-left
                          strong Show
                          select.form-control(ng-init="n_pages=10", ng-model="n_pages", value="10")
                            option(value="{{pag}}", ng-repeat="pag in pages") {{pag}}
                          strong entries
                        .form-group.pull-right
                          input.form-control(type='text', ng-model='search', placeholder='Search')
                      table.table
                        thead
                          th.text-center #
                          th: a.btn-simple.btn.label.btn-rose(ng-click="a='name';b=!b") Course name
                          th: a.btn-simple.btn.label.btn-rose(ng-click="a='code';b=!b") Course code
                          th: a.btn-simple.btn.label.btn-rose(ng-click="a='code';b=!b") Weight on report
                          th: a.btn-simple.btn.label.btn-rose(ng-click="a='code';b=!b") Course term
                          th: a.btn-simple.btn.label.btn-rose(ng-click="a='teacher_list';b=!b") Number of teachers
                          th Actions
                        tbody
                          tr(pagination-id="allcourses", dir-paginate="course in courses |orderBy:a:b|filter:search|itemsPerPage:n_pages")
                            td(width="1%" height="1%") {{$index + 1}}
                            td {{course.name | uppercase}}
                            td {{course.code|uppercase}}
                            td {{course.weightOnReport|uppercase}}
                            td {{course.courseTerm|toTermName}} {{course.courseTerm}}
                            td {{course.teacher_list.length}} teachers
                              button.btn-simple.btn.label.btn-rose(type='button',ng-click="setCurrentCourse(course)",data-target='#add_teacher_Modal', data-toggle='modal')
                                i.material-icons edit
                                |  Edit teachers
                            td.td-actions
                              button.btn.btn-danger(type='button',ng-click="deleteCourse(course._id,course.name)")
                                i.material-icons close
                              button.btn-simple.btn.label.btn-rose(type='button',ng-click="setCurrentCourse(course)",data-target='#edit_course_Modal', data-toggle='modal')
                                i.material-icons edit
                              button.btn-success.btn.label(type='button',ng-click="editCourseName(course._id,course.name, course.courseTerm)")
                                i.material-icons edit
                              p.category.text-center(ng-show ="!courses.length") No courses provided yet
                      dir-pagination-controls.pull-right(pagination-id='allcourses', max-size='5', direction-links='true', boundary-links='true')
                  #add_teacher_Modal.modal.fade(role='dialog')
                    .modal-dialog
                      .modal-content
                        .modal-header
                          i.material-icons school
                          h5.card-title Choose teacher for {{course_name|uppercase}}
                        .modal-body
                          .col-md-8
                            h4 Teacher list
                            div(ng-repeat ="t in currentTeachers")
                              h4: strong {{$index+1}}) {{t|toTeacher_name:teachers}}
                                .btn.btn-danger.btn-fab.btn-fab-mini(ng-click="dissociateTeacher(t)")
                                  i.material-icons close
                          .col-md-4
                            h4 Add a new teacher
                            .form-group.label-floating
                              select.form-control(ng-model="teacher_choosen",ng-change="affectTeacher(course_concerned,teacher_choosen)")
                                option(disabled) Pick a teacher
                                option(value="{{teacher._id}}",ng-repeat="teacher in teachers") {{teacher.name}}
                        .modal-footer
                          button.btn.btn-sm.btn-warning(type='button', data-dismiss='modal') Cancel
                  #edit_course_Modal.modal.fade(role='dialog')
                    .modal-dialog
                      .modal-content
                        .modal-header
                          i.material-icons school
                          h5.card-title Edit {{course_name|uppercase}}
                          h4.text-title.pull-right Exam:
                            span(ng-bind="exam_quota")
                            br
                            |Test:
                            span(ng-bind="test_quota")
                            br
                            | Total:
                            span(ng-bind="course_weight")
                        .modal-body
                          .col-md-4
                            .form-group.label-floating
                              label Course weight
                              input.form-control(type="text",autocomplete="off",ng-model="course_weight")
                          .col-md-4
                            .form-group.label-floating
                              label Test quota
                              input.form-control(type="text",autocomplete="off",ng-model="test_quota",ng-change="setExamQuota()")
                          .col-md-4
                            .form-group.label-floating
                              label Exam quota
                              input.form-control(type="text",autocomplete="off",ng-model="exam_quota",ng-change="setTestQuota()")
                        .modal-footer
                          button.btn.btn-sm.btn-primary.pull-left(ng-click="changeQuota()") Save quota
                          button.btn.btn-sm.btn-warning(type='button', data-dismiss='modal') Cancel
block append scripts
  script(src="../js/MIT/MIT_sweetalert2.js", type="text/javascript")
  script.
    var app =angular.module('eshuri_App', ['ngRoute', 'angularUtils.directives.dirPagination']);
    app
    .filter('toTermName', function() {
      return function(input){
        return input=='S'?'Semester':'Term'
      }
    })
    .filter('toClasseName', function() {
      return function(input, term){
        return term=='S'?'Y'+input:'S'+input
      }
    })
    .filter('yearToDate', function() {
      return function(input){
        input =Number(input)+2000;
        return input = input+'/'+Number(Number(input)+1);
      }
    })
    .filter('toNiceName', function() {
      return function(input){
        if(isNaN(input)) return input;
        switch(input){
          case '1': input ="Option";break;case '2': input ="High school";break;case '3': input ="Primary";break;
          case '4': input ="Infant school";break;
          default: input="Unknown Gender";break;
        }
        return input;
      }
    })
    .filter('toTeacher_name', function(){
      return function(input,list_teachers){
        if(input=='-')  return 'Not defined';
        for(var i =0;i < list_teachers.length;i++)
          if(list_teachers[i]._id == input) return list_teachers[i].name
      }
    })
    .controller('course_ManageCtrl', function($scope,$interpolate, $http,$window){
      var schoolName = "#{school_name}";
      var className = "#{classe_name}";
      var academicYear = "#{academic_year}";
      var classid = "#{classe_id}";
      function validateNameNumber(name) {
        var NAME = name.value;
        var values = name.split(' ').filter(function(v){return v!==''});
        if (values.length > 1) {
          //two or more words
          return true;
        } else {
          //not enough words
          return false;
        }
      }
      function getclassName(classN){
        return className.replace(/\s/g,'').toLowerCase();
      }
      function getAbbreviation(words){
        if (!words) { return ''; }
        var first_letter = function(x){ if (x) { return x[0]; } else { return ''; }};
        return words.split(' ').map(first_letter).join('');
      }
      $scope.setCourseWeight =function(){
        $scope.test_quota=scope.exam_quota=null;
        $scope.course_weight = Number($scope.test_quota) + Number($scope.exam_quota) < 0 ? Number($scope.test_quota) + Number($scope.exam_quota) : 0 ;
      }
      $scope.setTestQuota =function(){
        $scope.test_quota = Number($scope.course_weight)-Number($scope.exam_quota) > 0 ? Number($scope.course_weight)-Number($scope.exam_quota):0 ;
      }
      $scope.setExamQuota = function(){
        $scope.exam_quota = Number($scope.course_weight) - Number($scope.test_quota) > 0 ? Number($scope.course_weight) - Number($scope.test_quota):0;
      }
      $scope.changeQuota = function(){
        if(!$scope.exam_quota ||!$scope.test_quota ||!$scope.course_weight) return;
        $scope.course_details={_csrf:$scope.anti_csrf,
          course_id:$scope.course_concerned,
          course_name:$scope.course_name,
          classe_id:$scope.classe_id,
          test_quota:$scope.test_quota,
          exam_quota:$scope.exam_quota,
          course_weight:$scope.course_weight,}
        $http
        .post("/course.update.quota",$scope.course_details)
        .then(function(response){
          $('#edit_course_Modal').modal('hide');
          $scope.getListCourses();
        })
        .catch(function(erreur){
          console.log('Who:'+JSON.stringify(erreur));
          Notifier.danger(erreur.data)
        });     
      }
      $scope.setCourseCode = function(){
        var schoolAbbr = getAbbreviation(schoolName);
        var coursename = $scope.newCourse.name?$scope.newCourse.name:'';

        if(validateNameNumber(coursename)){
          var words = coursename.split(" ");  
          courseAbbr = words[0].substring(0,3)+'-'+getAbbreviation(words[1])

        }
        else{
          courseAbbr = coursename.substring(0,3);
        }
        var courseCode = schoolAbbr+'-'+getclassName(coursename)+'-'+courseAbbr;
        if (coursename!='') {$scope.newCourse.code = !courseCode?' ':courseCode;}
      }
      $scope.getListSchoolCourses = function(){
        $http
        .get("/school.courseAndProgram.list/"+$scope.school_id)
        .then(function(response){
          $scope.schoolCourses = response.data.courses;
        })
        .catch(function(erreur){
          Notifier.danger(erreur.data);
        });
      } 
      $scope.addNewCourse = function(){
        if (!$scope.newCourse) return;
        $scope.newCourse._csrf =$scope.anti_csrf;
        $scope.newCourse.school_id =$scope.school_id;
        $scope.newCourse.class_id =$scope.classe_id;
        $http
        .post("/course.add",$scope.newCourse)
        .then(function(response){
          Notifier.success(($scope.newCourse.name).toUpperCase()+" has been successfully added to the class");
          $scope.getListCourses();
          $scope.c_add =false;
          $scope.newCourse=null
        })
        .catch(function(erreur){
          Notifier.danger(erreur.data);
        }); 
        //console.log(courseCode)
      }
      $scope.getListCourses = function(){
        $http
        .post("/course.list",{_csrf:$scope.anti_csrf,school_id:$scope.school_id,class_id:$scope.classe_id,})
        .then(function(response){
          $scope.courses = response.data;
          $scope.c_add =false;
        })
        .catch(function(erreur){
          Notifier.danger(erreur.data);
        });
      }
      $scope.editCourseName = function(courseid, coursename, courseterm){
        swal({
          title: 'Change course name',
          html: '<div class="form-group">' +
                '<input id="course_name" type="text" class="form-control" placeholder="Type new course name here", value="'+coursename.toUpperCase()+'" />' +
              '</div>',
          showCancelButton: true,
          confirmButtonClass: 'btn btn-success',
          cancelButtonClass: 'btn btn-danger',
          buttonsStyling: false
        }).then(function(result) {  
          var schoolAbbr = getAbbreviation(schoolName);
          var thiscoursename = coursename?coursename:'';
          var thiscourseterm = courseterm?courseterm:'';
          //var thiscourseCode = schoolAbbr+'-'+getclassName(className)+'-'+coursename.substring(0,3)+'-'+academicYear+courseterm;
          //if (coursename!=''&&courseterm!='') {$scope.newCourse.code = !courseCode?' ':courseCode;}
          var courseName = $("#course_name").val();
          var courseAbbr = '';
          if(validateNameNumber(courseName)){
            var words = courseName.split(" ");  
            courseAbbr = words[0].substring(0,3)+'-'+getAbbreviation(words[1])

          }
          else{
            courseAbbr = courseName.substring(0,3);
          }
          var thiscourseCode = schoolAbbr+'-'+getclassName(className)+'-'+courseAbbr;
          //console.log(thiscourseCode);
          $http
          .post("/course.change.coursename", {
            _csrf:$scope.anti_csrf,
            course_id:courseid,
            class_id:classid,
            code:thiscourseCode,
            course_name: $("#course_name").val(),
          })
          .then(function(response){
            $scope.getListCourses();
            swal({
              title: 'Successfully changed!',
              text: coursename.toUpperCase()+' has changed to '+$("#course_name").val().toUpperCase()+'.',
              type: 'success',
              confirmButtonClass: "btn btn-success",
              buttonsStyling: false
            });
          }).catch(function(error){
            Notifier.danger(error.data);
          })
        }).catch(swal.noop)
      }
      $scope.deleteCourse = function(course_id,course_name){
        swal({
            title: 'Do you want to delete \n<i style="color:red">'+course_name.toUpperCase()+'</i> \n and all of its content and marks associated ?',
            text: "You will not be able to revert this!",
            html:'<div class="form-group"><label> Type your password please</label>'+
              '<input id="confirmPass" type="password" class="form-control" />'+
            '</div> <span class="category"> This action cannot be reverted !</span>',
            type: 'warning',
            showCancelButton: true,
            confirmButtonClass: 'btn btn-success',
            cancelButtonClass: 'btn btn-danger',
            confirmButtonText: 'Yes, delete it!',
            buttonsStyling: false
          }).then(function(){
              $http
            .post("/course.delete",{_csrf:$scope.anti_csrf,
            course_id:course_id,
            confirm_pass: $("#confirmPass").val(),
             })
            .then(function(response){
              $scope.getListCourses();
              swal({
                title: 'Deleted!',
                text: course_name.toUpperCase()+' has been deleted.',
                type: 'success',
                confirmButtonClass: "btn btn-success",
                buttonsStyling: false
              })
            })
            .catch(function(erreur){
              Notifier.danger(erreur.data);
            });
          });
      }
      $scope.dissociateTeacher = function(teacher_id,teacher_name){
        swal({
            title: 'Do you want to dissociate this teacher \n  from this course ?',
            text: "This teacher will no longer access the course!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonClass: 'btn btn-success',
            cancelButtonClass: 'btn btn-danger',
            confirmButtonText: 'Yes, dissociate !',
            buttonsStyling: false
          }).then(function(){
              $http
            .post("/school.teacher.dissociate",{
              _csrf:$scope.anti_csrf,
              course_id:$scope.course_concerned,
              teacher_id:teacher_id
             })
            .then(function(response){
              for(var i =0;i<$scope.currentTeachers.length;i++)
                if($scope.currentTeachers[i] ==teacher_id)
                  $scope.currentTeachers.splice(i,1);
              $('#add_teacher_Modal').modal('hide');
              swal({
                title: 'Dissociated!',
                text: 'Teacher dissociated ',
                type: 'success',
                confirmButtonClass: "btn btn-success",
                buttonsStyling: false
              })
            })
            .catch(function(erreur){
              Notifier.danger(erreur.data);
            });
          });
      }
      $scope.getTerms_Limit = function() {
          return Array.apply(null, {length: $scope.term_quantity}).map(Number.call, Number)
      }

      $scope.setTeacher = function(teacher_id){
        alert(" Teacher id choosen "+teacher_id)
      }
      $scope.loadTeachers = function(){
        $http
        .get("/school.teachers.list/"+$scope.school_id)
        .then(function(response){
          $scope.teachers = response.data;
        })
        .catch(function(erreur){
          Notifier.danger(erreur.data);
        });
      }
      $scope.affectTeacher =function(_course_id,_teacher_id){
        //$scope.teacher_add = true;
        $http
        .post("/course.affect.teacher",{_csrf:$scope.anti_csrf,
          course_id:_course_id,
          teacher_id:_teacher_id
          }
        )
        .then(function(response){
          //$scope.setCurrentCourse(null);
          $scope.currentTeachers.push(_teacher_id)
          $scope.teacher_choosen =null;
          $scope.getListCourses();
          $('#add_teacher_Modal').modal('hide');
          Notifier.success("A new teacher has been affected to this course");
        })
        .catch(function(erreur){
          Notifier.danger(erreur.data);
        });
      }
      $scope.setCurrentCourse = function(course){
        $scope.course_concerned =course._id;
        $scope.course_name =course.name;
        $scope.test_quota=course.test_quota;
        $scope.exam_quota=course.exam_quota;
        $scope.course_weight=course.weightOnReport;
        $scope.currentTeachers =course? course.teacher_list:null;
        //$scope.teacher_add=!$scope.teacher_add;
      }
      $scope.updateClass = function(){
        var date = new Date,
          year = date.getFullYear();
        //- if($scope.nv.academic_year<year) return Notifier.danger('Academic year cannot go below '+year);
        if($scope.nv.academic_year>Number(year+1)) return Notifier.danger('Academic year cannot go over '+Number(year+1));
        $http
        .post("/class.update.settings",{
            _csrf:$scope.anti_csrf,
            academic_year:$scope.nv.academic_year,
            currentTerm:$scope.nv.currentTerm,
            class_id:$scope.classe_id,
          }
        )
        .then(function(response){
          $window.location.href ='/dashboard.course/'+$scope.classe_id;
        })
        .catch(function(erreur){
          Notifier.danger(erreur.data);
        });
      }
      $scope.getListClasses = function(){
        $http
        .get("/classe.list/"+$scope.school_id)
        .then(function(response){
          $scope.classes = response.data;
        })
        .catch(function(erreur){
          Notifier.danger(erreur.data);
        });
      }
      $scope.getYears = function(){
        var date = new Date,
          years = [],
          year = date.getFullYear();
        for (var i = year; i < year + 1; i++) {
          years.push(i);   
        }
        return years;
      }
      $scope.pages=[3,5,10,15,20,25];
      $scope.school_name ="#{school_name}";
      $scope.classe_name ="#{classe_name}";
      $scope.academic_year ="#{academic_year}";
      $scope.anti_csrf ="#{csrf_token}";
      $scope.school_id ="#{school_id}";
      $scope.classe_id ="#{classe_id}";
      $scope.term_name="#{term_name}"
      $scope.term_quantity="#{term_quantity}";
      $scope.institution="#{institution}";
      $scope.currentTerm ="#{currentTerm}";
      $scope.newCourse ={}
      if($scope.term_quantity==3) $scope.newCourse.courseTerm='4';
      $scope.course_concerned;
      $scope.getListCourses();
      $scope.getListClasses();
      $scope.getListSchoolCourses();
      $scope.teachers =[];
      $scope.loadTeachers();
      //$scope.teacher_add = false;
      $scope.showCodeForm = false;
      $scope.c_add =false; // var used to show/hide course add
    })
